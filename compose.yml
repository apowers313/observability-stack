networks:
  obs-public:
    driver: overlay
  obs-private:
    driver: bridge
  obs:

# TODO: setup private comms between containers


# TODO: is this the right way to setup volumes?
volumes:
  obs-data:
    name: otel-data
    driver: local
    driver_opts:
      type: none
        #device: /var/data/observation
      device: /var/data/observation
      o: bind

services:
  prometheus:
    image: prom/prometheus
    command:
      - --web.enable-otlp-receiver
      #- --web.enable-remote-write-receiver
      #- --enable-feature=exemplar-storage
      #- --enable-feature=native-histograms
      #- --storage.tsdb.path=/data/prometheus
    volumes:
      - ./config/prometheus.yml:/prometheus/prometheus.yml
      #- ./data/promethus:/data/prometheus
    ports:
      - "9090:9090"
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"
      #test: ["CMD", "curl", "-f", "http://localhost:9090/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  tempo:
    image: grafana/tempo
    user: root
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
      - ./data:/var/tempo
    ports:
      #- "14268:14268"  # jaeger ingest
      - "3200:3200"    # tempo
      #- "9095:9095"    # tempo grpc
      #- "4317:4317"    # otlp grpc
      #- "4318:4318"    # otlp http
      #- "9411:9411"    # zipkin
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:3200/ready || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
#    depends_on:
#      prometheus:
#        condition: service_healthy
    restart: unless-stopped

  loki:
    image: grafana/loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    #volumes:
    #  - ./data:/loki
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    volumes:
      - obs-data:/data
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      #- GF_AUTH_DISABLE_LOGIN_FORM=true
      #- GF_SECURITY_ALLOW_EMBEDDING=true
      #- GF_PATHS_HOME=/data/grafana
      #- GF_PATHS_DATA=/data/grafana/data
      #- GF_PATHS_PLUGINS=/data/grafana/plugins
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
#    depends_on:
#      prometheus:
#        condition: service_healthy
#      tempo:
#        condition: service_healthy
#      loki:
#        condition: service_healthy
    restart: unless-stopped

  otelcol:
    image: otel/opentelemetry-collector-contrib
    #command: --config=/etc/otelcol/config.yaml
    volumes:
      - ./config/otelcol.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      #- "1888:1888"    # pprof extension
      - "8888:8888"    # Prometheus metrics exposed by the Collector
        #- "8889:8889"    # Prometheus exporter metrics
        #- "13133:13133"  # health_check extension
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP http receiver
        #- "55679:55679"  # zpages extension
#    depends_on:
#      prometheus:
#        condition: service_healthy
#      tempo:
#        condition: service_healthy
#      loki:
#        condition: service_healthy
#      grafana:
#        condition: service_healthy
    restart: unless-stopped

