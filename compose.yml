networks:
  obs-net:
    driver: bridge

services:
  prometheus:
    image: prom/prometheus
    command:
      - --web.enable-otlp-receiver
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
      - --storage.tsdb.retention.time=20y
      #- --storage.tsdb.path=/data/prometheus
    volumes:
      - ./config/prometheus.yml:/prometheus/prometheus.yml
      - ${PROMETHEUS_DATA:-./data}:/prometheus
    networks:
      - obs-net
    ports:
      - 9090:9090
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  tempo:
    image: grafana/tempo
    user: root
    command: 
      - -config.file=/etc/tempo.yaml
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
      - ${TEMPO_DATA:-./data}:/data/tempo
    networks:
      - obs-net
    ports:
      # internal: 4418, 4417, 9096
      - 3200:3200  # tempo web server
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:3200/ready" ]
      interval: 5s
      retries: 10
    depends_on:
      prometheus:
        condition: service_healthy
    restart: unless-stopped

  loki:
    image: grafana/loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ${LOKI_DATA}:/loki
    networks:
      - obs-net
    ports:
      - 3100:3100
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  pyroscope:
    image: grafana/pyroscope
    volumes:
      #- ./grafana/pyroscope-local-config.yaml:/etc/pyroscope/server.yaml
      - ${PYROSCOPE_DATA:-./data/pyroscope}:/var/lib/pyroscope
    networks:
      - obs-net
    ports:
      - 4040:4040
    # XXX: no $PATH and no wget = no healthcheck
#    healthcheck:
#      test: [ "CMD", "wget", "--spider", "http://localhost:4040/-/ready" ]
#      interval: 5s
#      retries: 20
#      interval: 10s
#      timeout: 5s
#      retries: 3
#      start_period: 30s
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    volumes:
      - ${GRAFANA_DATA:-./data}:/var/lib/grafana
        #- ./data/grafana:/data
    networks:
      - obs-net
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-pyroscope-app
      #- GF_AUTH_ANONYMOUS_ENABLED=true
      #- GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      #- GF_AUTH_DISABLE_LOGIN_FORM=true
      #- GF_SECURITY_ALLOW_EMBEDDING=true
      #- GF_PATHS_HOME=/data/grafana
      #- GF_PATHS_DATA=/data/grafana/data
      #- GF_PATHS_PLUGINS=/data/grafana/plugins
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      prometheus:
        condition: service_healthy
      tempo:
        condition: service_healthy
      loki:
        condition: service_healthy
      #pyroscope:
        #condition: service_healthy
    restart: unless-stopped

  otelcol:
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./config/otelcol.yaml:/etc/otelcol-contrib/config.yaml
      - $OTELCOL_DATA=/var/lib/otelcol
      #- /:/hostfs  ## for hostmetrics receiver
      #- /var/log:/var/log ## for filelogs receiver
    networks:
      - obs-net
    ports:
      - 1888:1888    # pprof extension
      - 8888:8888    # Prometheus metrics exposed by the Collector
      - 13133:13133  # health_check extension
      - 4317:4317    # OTLP gRPC receiver
      - 4318:4318    # OTLP http receiver
      - 55679:55679  # zpages extension
    # XXX: healthcheck doesn't work in this container because there is no shell
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/37635
    #healthcheck:
      #test: ["CMD", "curl", "-f", "http://localhost:13133"]
      #interval: 10s
      #timeout: 5s
      #retries: 3
      #start_period: 30s
    depends_on:
      prometheus:
        condition: service_healthy
      tempo:
        condition: service_healthy
      loki:
        condition: service_healthy
      #pyroscope:
        #condition: service_healthy
      grafana:
        condition: service_healthy
    restart: unless-stopped

